syntax = "proto3";
option java_package = "pb";
import "google/protobuf/empty.proto";
package pb;
// TODO: The protocol for tuples to talk to each other

// Users take care of serialization and deserialization
// the operator is reponsible for calculating the delta on the new config
message Msg{
  enum MsgType {
    DATA = 0;
    CONTROL = 1;
  }
  MsgType type = 1;
  optional bytes data = 2;
  optional OperatorConfig config = 3;
}

// how do we do bykey?
message OperatorConfig{
  enum OperatorType{
    SOURCE = 0;
    SINK = 1;
    MAP = 2;
    COUNT = 3;
  }
  OperatorType type = 1;
  string name = 2;
  string jarKey = 3; // UDF jars stored at CP's state store?
  int32 listenPort = 4; // the port the operator will listen on (accept input)
  repeated string nextOperatorAddress = 5; // ip:port
  string byKey = 6; // if byKey is not empty, the operator will be partitioned by this key
}

service OPService{
  rpc PushMsg(Msg) returns (google.protobuf.Empty);
}