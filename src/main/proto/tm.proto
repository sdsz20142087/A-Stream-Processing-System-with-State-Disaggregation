syntax = "proto3";
option java_package="pb";
import "google/protobuf/empty.proto";
package pb;

/*
TaskManager's RPC handler protocols,
include:
1. Query TaskManager's status:
  Operator Quota,
  Current load,
  Current state store load?
2. Configure Operators
 */

message TMStatusRequest{

}

message OperatorStatus{
  string name = 1;
  string address = 2;
  int32 inputQueueLength = 3;
  int32 outputQueueLength = 4;
}

message TMStatusResponse{
  int32 operatorQuota = 1; // the number of operators it's allowed to have
  int32 operatorCount = 2; // the number of operators it's currently running
  //int32 stateStoreLoad = 3; //
  repeated OperatorStatus operatorStatus = 4;
}

message Msg{
  enum MsgType {
    DATA = 0;
    CONTROL = 1;
  }
  MsgType type = 1;
  optional string operatorName = 2;
  optional bytes data = 3;
  optional OperatorConfig config = 4;
  optional int32 partitionId = 5; // what is this for?
}
enum PartitionStrategy{
  HASH = 0;
  ROUND_ROBIN = 1;
  BROADCAST = 2;
  RANDOM = 3;
}

enum OperatorType{
  SOURCE = 0;
  SINK = 1;
  MAP = 2;
  COUNT = 3;
}

message OutputMetadata{
  string name = 1;
  string address = 2;
}

message OperatorConfig{
  string name = 2;
  repeated OutputMetadata outputMetadata = 3; // The next TM's address: ip:port
  PartitionStrategy partitionStrategy = 4;
  int32 bufferSize = 5;
}

service TMService{
  rpc GetStatus(TMStatusRequest) returns (TMStatusResponse);
  rpc AddOperator(AddOperatorRequest) returns (google.protobuf.Empty);
  rpc RemoveOperator(RemoveOperatorRequest) returns (google.protobuf.Empty);
  rpc ReConfigOperator(ReConfigOperatorRequest) returns (google.protobuf.Empty);
  rpc PushMsg(Msg) returns (google.protobuf.Empty);
  rpc RemoveState(RemoveStateRequest) returns (google.protobuf.Empty);
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  rpc UpdateState(UpdateStateRequest) returns (google.protobuf.Empty);
}

// TM should calculate config diff based on this
message AddOperatorRequest{
  OperatorConfig config = 1;
  bytes obj = 2; // serialized object
}

message RemoveOperatorRequest{
  string operatorName = 1;
}

message ReConfigOperatorRequest{
  OperatorConfig config = 1;
}

message RemoveStateRequest{
  string stateKey = 1;
}

message GetStateRequest{
  string stateKey = 1;
}

message GetStateResponse{
  bytes obj = 1;
}

message UpdateStateRequest{
  string stateKey = 1;
  bytes obj = 2;
}